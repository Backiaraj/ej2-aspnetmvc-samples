@using Syncfusion.EJ2
@using Syncfusion.EJ2.Schedule

@section ControlsSection{
    <div class="control-section">
        <div class="content-wrapper">
            @Html.EJS().Schedule("schedule").Width("100%").Height("650px").SelectedDate(new DateTime(2018, 8, 1)).CurrentView(View.TimelineWeek).WorkHours(new ScheduleWorkHours { Start = "08:00", End = "18:00" }).TimeScale(ts => ts.SlotCount(1).Interval(60)).Views(view => { view.Option(View.TimelineDay).Add(); view.Option(View.TimelineWeek).Add(); }).ResourceHeaderTemplate("#resource-template").Group(group => group.EnableCompactView(false).Resources(ViewBag.ResourceNames)).Resources(res => { res.DataSource(ViewBag.RoomDatas).Field("RoomId").Title("Room Type").Name("MeetingRoom").TextField("name").IdField("id").ColorField("color").AllowMultiple(true).Add(); }).EventSettings(e => e.Fields(f => f.Subject(sub => sub.Name("Subject").Title("Summary")).Location(loc => loc.Name("Location").Title("Location")).Description(des => des.Name("Description").Title("Comments")).StartTime(st => st.Name("StartTime").Title("From")).EndTime(et => et.Name("EndTime").Title("To"))).DataSource(ViewBag.datasource)).PopupOpen("onPopupOpen").RenderCell("onRenderCell").EventRendered("onEventRendered").ActionBegin("onActionBegin").Render()
        </div>
    </div>
    <style>
        .e-schedule .e-timeline-view .e-resource-left-td {
            vertical-align: bottom;
        }

        .e-schedule.e-device .e-timeline-view .e-resource-left-td {
            width: 75px;
        }

        .e-schedule .e-timeline-view .e-resource-left-td .e-resource-text {
            display: flex;
            font-weight: 500;
            padding: 0;
        }

            .e-schedule .e-timeline-view .e-resource-left-td .e-resource-text > div {
                border-right: 1px solid rgba(0, 0, 0, 0.12);
                border-top: 1px solid rgba(0, 0, 0, 0.12);
                flex: 0 0 33.3%;
                font-weight: 500;
                height: 36px;
                line-height: 34px;
                padding-left: 5px;
            }

                .e-schedule .e-timeline-view .e-resource-left-td .e-resource-text > div:last-child {
                    border-right: 0;
                }

        .e-schedule .template-wrap {
            display: flex;
            height: 100%;
            text-align: left;
        }

            .e-schedule .template-wrap > div {
                border-right: 1px solid rgba(0, 0, 0, 0.12);
                flex: 0 0 33.3%;
                font-weight: 500;
                line-height: 58px;
                overflow: hidden;
                padding-left: 5px;
                text-overflow: ellipsis;
            }

                .e-schedule .template-wrap > div:last-child {
                    border-right: 0;
                }

        .e-schedule .e-timeline-view .e-resource-cells,
        .e-schedule .e-timeline-month-view .e-resource-cells {
            padding-left: 0;
        }

        .e-schedule .e-timeline-view .e-date-header-wrap table col,
        .e-schedule .e-timeline-view .e-content-wrap table col {
            width: 100px;
        }

        .e-schedule .e-read-only {
            opacity: .8;
        }

        @@media (max-width: 550px) {
            .e-schedule .e-timeline-view .e-resource-left-td {
                width: 100px;
            }

                .e-schedule .e-timeline-view .e-resource-left-td .e-resource-text > div,
                .e-schedule .template-wrap > div {
                    flex: 0 0 100%;
                }

                    .e-schedule .template-wrap > div:first-child {
                        border-right: 0;
                    }

                    .e-schedule .e-timeline-view .e-resource-left-td .e-resource-text > div:first-child {
                        border-right: 0;
                    }

            .e-schedule .room-type,
            .e-schedule .room-capacity {
                display: none;
            }
        }
    </style>
    <script id="resource-template" type="text/x-template">
        <div class='template-wrap'>
            <div class="room-name">${getRoomName(data)}</div>
            <div class="room-type">${getRoomType(data)}</div>
            <div class="room-capacity">${getRoomCapacity(data)}</div>
        </div>
    </script>
    <script type="text/javascript">
        var isReadOnly = function (endDate) {
            return (endDate < new Date(2018, 6, 31, 0, 0));
        };
        window.getRoomName = function (value) {
            return value.resourceData[value.resource.textField];
        };
        window.getRoomType = function (value) {
            return value.resourceData.type;
        };
        window.getRoomCapacity = function (value) {
            return value.resourceData.capacity;
        };
        function onPopupOpen(args) {
            var data = args.data;
            if (args.type === 'QuickInfo' || args.type === 'Editor' || args.type === 'RecurrenceAlert' || args.type === 'DeleteAlert') {
                var target = (args.type === 'RecurrenceAlert' ||
                    args.type === 'DeleteAlert') ? args.element[0] : args.target;
                if (!ej.base.isNullOrUndefined(target) && target.classList.contains('e-work-cells')) {
                    if ((target.classList.contains('e-read-only-cells')) || (!this.isSlotAvailable(data))) {
                        args.cancel = true;
                    }
                }
                else if (!ej.base.isNullOrUndefined(target) && target.classList.contains('e-appointment') &&
                    (isReadOnly(data.EndTime))) {
                    args.cancel = true;
                }
            }
        }
        function onRenderCell(args) {
            if (args.element.classList.contains('e-work-cells')) {
                if (args.date < new Date(2018, 6, 31, 0, 0)) {
                    args.element.setAttribute('aria-readonly', 'true');
                    args.element.classList.add('e-read-only-cells');
                }
            }
            if (args.elementType === 'emptyCells' && args.element.classList.contains('e-resource-left-td')) {
                var target = args.element.querySelector('.e-resource-text');
                target.innerHTML = '<div class="name">Rooms</div><div class="type">Type</div><div class="capacity">Capacity</div>';
            }
        }
        function onEventRendered(args) {
            var data = args.data;
            if (isReadOnly(data.EndTime)) {
                args.element.setAttribute('aria-readonly', 'true');
                args.element.classList.add('e-read-only');
            }
        }
        function onActionBegin(args) {
            if (args.requestType === 'eventCreate' || args.requestType === 'eventChange') {
                var data;
                if (args.requestType === 'eventCreate') {
                    data = args.data[0];
                } else if (args.requestType === 'eventChange') {
                    data = args.data;
                }
                if (!this.isSlotAvailable(data)) {
                    args.cancel = true;
                }
            }
        }
    </script>
}
@*custom code start*@
@section Meta{
    <meta name="description" content="This example demonstrates the Room Scheduler in ASP.NET MVC Scheduler control. Explore here for more details." />
}
@*custom code end*@
@section ActionDescription{
    <div id="action-description">
        <p>
            This demo showcases the scheduler that lists out the meeting rooms of an office and its availability. The slots which are
            already booked and the lunch time canâ€™t be allowed for any new bookings. Also, the existing bookings which were made
            on past dates were not allowed to edit as well as the new bookings on those past dates will also be not allowed.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            Here, the timeline view is grouped with single level of resources by making use of the
            <code>group</code> property. Also, the lunch time blocking is done by block event. The event editor and popup is prevented to open on those blocked time slots as well
            as on the past bookings by making use of the
            <code>popupOpen</code> event. The
            <code>eventRendered</code> event is utilized in order to make the bookings done on past dates as read-only. To block
            more than one bookings per slot, the
            <code>isSlotAvailable</code> method is used. Also, the resource header displayed at the left panel is customized
            to render as columns with the help of
            <code>resourceHeaderTemplate</code>. The tooltip for resource header is customized by defining the
            <code>headerTooltipTemplate</code> property within the
            <code>group</code> API.
        </p>
        <p>
            <b>Note:</b> The dates which lies beyond the current date set to scheduler through
            <code>selectedDate</code> property is considered as the past dates here in this sample.
        </p>
    </div>
}
@section Title{
    <title>ASP.NET MVC Scheduler Room Scheduler Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Room Scheduler in ASP.NET MVC Scheduler Control</h1>
}
@using Syncfusion.EJ2
@using Syncfusion.EJ2.CircularGauge
<style>
    .sliderwrap {
        margin-top: 0px;
        width: 300px;
        align-self: center;
    }

    #slider.e-control.e-slider .e-handle {
        background-color: #4B4B4B;
    }

    .e-control-wrapper.e-slider-container.e-horizontal .e-slider-track {
        background: -webkit-linear-gradient(left, #ea501a 0, #ea501a 20%, #f79c02 40%, #e5ce20 60%, #a1cb43 80%, #82b944 100%);
        background: linear-gradient(left, #ea501a 0, #ea501a 20%, #f79c02 40%, #e5ce20 60%, #a1cb43 80%, #82b944 100%);
        background: -moz-linear-gradient(left, #ea501a 0, #ea501a 20%, #f79c02 40%, #e5ce20 60%, #a1cb43 80%, #82b944 100%);
    }

    .e-limit-bar.e-limits {
        background-color: transparent !important;
    }

    .e-control-wrapper.e-slider-container.e-horizontal .e-range {
        height: 0px !important;
    }

    #slider.e-control.e-slider .e-slider-track {
        height: 8px;
        top: calc(50% - 4px);
        border-radius: 5px;
    }
</style>
@section ControlsSection{
    <div class="control-section" align="center">
        @Html.EJS().CircularGauge("container").Loaded("loaded").Load("gaugeLoad").Title("Progress Tracker").TitleStyle(ts=>ts.Size("18px")).Axes(axes => axes
           .Radius("80%").StartAngle(200).EndAngle(160).Minimum(0).Maximum(100).LabelStyle(ls => ls.Position(Position.Inside))
           .MajorTicks(major=>major.Height(0)).MinorTicks(minor=>minor.Height(0))
           .Pointers(pt => pt.Value(60).RoundedCornerRadius(20).Type(PointerType.RangeBar).Radius("90%").Color("#e5ce20").PointerWidth(30).Animation(animation=>animation.Enable(false)).Border(border=>border.Width(0)).Add())
           .LineStyle(lin => lin.Width(0))
           .Ranges(ranges=>ranges.Start(0).End(100).Radius("90%").StartWidth("30").EndWidth("30").Color("#E0E0E0").RoundedCornerRadius(20).Add())
           .Add()).Render()
    </div>
    <div id='template'>
        <div class='sliderwrap'>
            <div id='default'></div>
        </div>
    </div>
    <script type="text/javascript">
        var circulargauge;
        var sliderValue = 60;
        function gaugeLoad(args) {
            var arctheme = themeName ? themeName : 'Material';
            args.gauge.theme = (arctheme.charAt(0).toUpperCase() + arctheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast');
            if (!circulargauge) {
                circulargauge = args.gauge;
                args.gauge.axes[0].minorTicks.height = 0;
                args.gauge.axes[0].majorTicks.height = 0;
                args.gauge.axes[0].labelStyle.font.size = "0px";
                args.gauge.axes[0].annotations = [{
                    content: '<div id="pointervalue" style="font-size:35px;width:120px;text-align:center">' +
                        sliderValue.toString() + '/100</div>',
                    angle: 0,
                    zIndex: '1',
                    radius: '0%'
                },
                {
                    content: '<div id="slider" style="height:70px;width:250px;"></div>',
                    angle: 0,
                    zIndex: '1',
                    radius: '-100%'
                },
                ];
            }
        }
        function loaded(args) {
            var annotation = document.getElementById(args.gauge.element.id + '_Annotations_0');
            if (annotation) {
                annotationRender('slider', circulargauge.axes[0].pointers[0].value);
            }
        }
        function annotationRender(id, sliderValue) {
            var first = new ej.inputs.Slider({
                min: 0, max: 100,
                type: 'MinRange',
                limits: { enabled: true, minStart: 0, minEnd: 100 },
                value: sliderValue,
                change: function (args) {
                    sliderValue = args.value;
                    if (!isNaN(sliderValue)) {
                        circulargauge.isProtectedOnChange = true;
                        if (sliderValue >= 0 && sliderValue < 20) {
                            circulargauge.axes[0].pointers[0].color = '#ea501a';
                        }
                        else if (sliderValue >= 20 && sliderValue < 40) {
                            circulargauge.axes[0].pointers[0].color = '#f79c02';
                        }
                        else if (sliderValue >= 40 && sliderValue < 60) {
                            circulargauge.axes[0].pointers[0].color = '#e5ce20';
                        }
                        else if (sliderValue >= 60 && sliderValue < 80) {
                            circulargauge.axes[0].pointers[0].color = '#a1cb43';
                        }
                        else if (sliderValue >= 80 && sliderValue < 100) {
                            circulargauge.axes[0].pointers[0].color = '#82b944';
                        }
                        circulargauge.setPointerValue(0, 0, sliderValue);
                        if (document.getElementById('pointervalue')) {
                            document.getElementById('pointervalue').innerHTML = circulargauge.axes[0].pointers[0].value.toString() + '/100';
                        }
                    }
                }
            });
            first.appendTo('#' + id);
        }
    </script>
    <script id='pointerValue' type="text/x-template">
        <div id='sliderwrap'>
            <div class='des'>
                <div id='default'></div>
            </div>
        </div>
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample visualizes the progress of a work in the circular gauge using the range bar pointer with rounded corners.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render the ranges and range bar pointer with rounded corners. The EJ2 Slider control is placed at the bottom of the gauge using annotation to change the range bar pointer value. Based on the value, color of the pointer can also be changed.
        </p>
        <p>
            For more information on ranges, refer to this
            <a target="_blank" href="http://ej2.syncfusion.com/documentation">documentation</a> section.
        </p>
    </div>
}



@section Title{
                    <title>ASP.NET MVC Circular Gauge ArcGauge Example - Syncfusion Demos </title> 
                }
@section Meta{
                    <meta name="description" content="This example demonstrates the ArcGauge in ASP.NET MVC Circular Gauge control. Explore here for more details."/>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of ArcGauge in ASP.NET MVC Circular Gauge Control</h1>
                }
@using Syncfusion.EJ2
@using Syncfusion.EJ2.CircularGauge
@section ControlsSection{
    <script id='pointerValue' type="text/x-template">
        <div id='templateWrap'>
            <div class='des'>
                <div id='pointerannotation' style="width:90px;text-align:center;font-size:20px;font-family:Roboto">${pointers[0].value} km/h</div>
            </div>
        </div>
    </script>
    <div class="col-md-8 control-section" align="center">
        @Html.EJS().CircularGauge("container").Load("gaugeLoad").Title("Speedometer").TitleStyle(titleStyle=>titleStyle.Size("18px")).CenterY("70%").CenterX("50%").Axes(axes=>axes
   .Radius("120%").StartAngle(270).EndAngle(90).Minimum(0).Maximum(120).Pointers(pointers=>pointers.Animation(animation=>animation.Enable(true).Duration(900)).Value(40)
   .Radius("80%").Color("#757575").PointerWidth(7).Cap(cap=>cap.Radius(8).Color("#757575").Border(border=>border.Width(0)))
   .NeedleTail(needleTail=>needleTail.Color("#757575").Length("15%")).Add()).Annotations(annotations=>annotations
   .Content("#pointerValue").Angle(0).ZIndex("1").Radius("30%").Add()).Add()).Render()
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%; margin-left: -10px">
            <tbody>
                <tr>
                    <td style="width: 40%">
                        <div class="property-text" style="width:100px"> Show text labels</div>
                    </td>
                    <td style="width: 40%;">
                        <div style="margin-left: 30px">
                            <input type="checkbox" id="showText" checked />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width: 40%">
                        <div class="property-text" style="width:100px; margin-top:5px"> Combine ranges</div>
                    </td>
                    <td style="width: 40%;">
                        <div style="margin-left: 30px">
                            <input type="checkbox" id="combineRange" checked />
                        </div>
                    </td>
                </tr>
                <tr>
                    <td style="width: 40%">
                        <div class="property-text" style="width:120px; margin-top:10px"> Gap between ranges</div>
                    </td>
                    <td style="width: 40%;">
                        <div style="margin-left: 30px">
                            <input type="checkbox" id="range" checked />
                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
    <svg style="height:0px;width:0px">
        <defs>
            <linearGradient id="grad1" x1="0%" y1="0%" x2="100%" y2="0%">
                <stop offset="0%" style="stop-color:#82b944;stop-opacity:1" />
                <stop offset="50%" style="stop-color:rgb(255,255,0);stop-opacity:1" />
                <stop offset="100%" style="stop-color:red;stop-opacity:1" />
            </linearGradient>
        </defs>
    </svg>
    <script type="text/javascript">
        var circulargauge;
        function gaugeLoad(sender) {
            var selectedTheme = themeName ? themeName : 'Material';
            sender.gauge.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast');
            if (!circulargauge) {
                circulargauge = sender.gauge;
                sender.gauge.axes[0].lineStyle.width = 0;
                sender.gauge.axes[0].labelStyle = {
                    useRangeColor: false, position: 'Outside', autoAngle: true,
                    font: { size: '13px', fontFamily: 'Roboto' }
                };
                sender.gauge.axes[0].majorTicks.width = 0;
                sender.gauge.axes[0].minorTicks.width = 0;
                sender.gauge.axes[0].annotations[0].zIndex = 1;
                sender.gauge.axes[0].ranges = [
                    {
                        start: 0,
                        end: 20,
                        startWidth: 5, endWidth: 10,
                        radius: '102%',
                        color: '#82b944',
                    },
                    {
                        start: 20,
                        end: 40,
                        startWidth: 10, endWidth: 15,
                        radius: '102%',
                        color: '#a1cb43',
                    }, {
                        start: 40,
                        end: 60,
                        startWidth: 15, endWidth: 20,
                        radius: '102%',
                        color: '#ddec12',
                    },
                    {
                        start: 60,
                        end: 80,
                        startWidth: 20, endWidth: 25,
                        radius: '102%',
                        color: '#ffbc00',
                    },
                    {
                        start: 80,
                        end: 100,
                        startWidth: 25, endWidth: 30,
                        radius: '102%',
                        color: '#ff6000',
                    },
                    {
                        start: 100,
                        end: 120,
                        startWidth: 30, endWidth: 35,
                        radius: '102%',
                        color: 'red',
                    }
                ];
            }
        }
        var gauge5Interval1 = setInterval(function () {
            var newVal = circulargauge.axes[0].pointers[0].value + (Math.floor(Math.random() * (10 - (-10))) - 10);
            if (newVal <= 0) {
                newVal = 5;
            }
            if (document.getElementById('container')) {
                circulargauge.axes[0].pointers[0].animation.enable = true;
                circulargauge.setPointerValue(0, 0, newVal);
                if (!ej.base.isNullOrUndefined(document.getElementById('pointerannotation'))) {
                    document.getElementById('pointerannotation').innerHTML = newVal.toString() + ' km/h';
                }
            }
            else {
                clearInterval(this.gauge5Interval1);
            }
        }, 1000);
        var showText;
        var interval = new ej.buttons.CheckBox({
            change: showText, checked: false
        }, '#showText');
        var combineRange;
        var rangeSet = new ej.buttons.CheckBox({
            change: combineRange, checked: false
        }, '#combineRange');
        var range;
        var showCheckBox = new ej.buttons.CheckBox({
            change: range, checked: false
        }, '#range');
        rangeSet.change = combineRange = function (e) {
            if (e.checked === true) {
                showCheckBox.disabled = true;
                circulargauge.axes[0].ranges = [{
                    start: 0,
                    end: 120,
                    startWidth: 5, endWidth: 35,
                    radius: '102%',
                    color: 'url(#grad1)',
                }];
                circulargauge.axes[0].pointers[0].animation.enable = false;
                circulargauge.refresh();
            }
            else {
                showCheckBox.disabled = false;
                circulargauge.axes[0].ranges = [
                    {
                        start: 0,
                        end: 20,
                        startWidth: 5, endWidth: 10,
                        radius: '102%',
                        color: '#82b944',
                    },
                    {
                        start: 20,
                        end: 40,
                        startWidth: 10, endWidth: 15,
                        radius: '102%',
                        color: '#a1cb43',
                    }, {
                        start: 40,
                        end: 60,
                        startWidth: 15, endWidth: 20,
                        radius: '102%',
                        color: '#ddec12',
                    },
                    {
                        start: 60,
                        end: 80,
                        startWidth: 20, endWidth: 25,
                        radius: '102%',
                        color: '#ffbc00',
                    },
                    {
                        start: 80,
                        end: 100,
                        startWidth: 25, endWidth: 30,
                        radius: '102%',
                        color: '#ff6000',
                    },
                    {
                        start: 100,
                        end: 120,
                        startWidth: 30, endWidth: 35,
                        radius: '102%',
                        color: 'red',
                    }
                ];
                circulargauge.axes[0].pointers[0].animation.enable = false;
                circulargauge.refresh();
            }
        };
        interval.change = range = function (e) {
            if (e.checked === true) {
                circulargauge.axes[0].majorTicks.interval = 10;
                circulargauge.axisLabelRender = function (args) {
                    var text;
                    switch (parseInt(args.text)) {
                        case 10:
                            text = 'Ideal';
                            break;
                        case 30:
                            text = 'Safe';
                            break;
                        case 50:
                            text = 'Good';
                            break;
                        case 70:
                            text = 'Ok';
                            break;
                        case 90:
                            text = 'Risk';
                            break;
                        case 110:
                            text = 'Danger';
                            break;
                        default:
                            text = '';
                            break;
                    }
                    args.text = text;
                };
                circulargauge.axes[0].pointers[0].animation.enable = false;
                circulargauge.refresh();
            }
            else {
                circulargauge.axes[0].majorTicks.interval = 20;
                circulargauge.axes[0].minimum = 0;
                circulargauge.axes[0].maximum = 120;
                circulargauge.axisLabelRender = function (args) { };
                circulargauge.axes[0].pointers[0].animation.enable = false;
                circulargauge.refresh();
            }
        };
        showCheckBox.change = range = function (e) {
            if (e.checked) {
                circulargauge.axes[0].rangeGap = 5;
            }
            else {
                circulargauge.axes[0].rangeGap = null;
            }
            circulargauge.axes[0].pointers[0].animation.enable = false;
            circulargauge.refresh();
        };
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample depicts the appearance of speedometer rendered using the circular gauge. The pointer is changed with random values dynamically.
        </p>
    </div>
}
@section Description{
    <div id="description">
        <p>
            In this example, you can see how to make the look of circular gauge like a speedometer. The labels can be changed to text values, gap can be added between the ranges, or the ranges can be combined to form single range using the options in the properties panel.
        </p>
        <p>
            For more information on ranges, refer to this
            <a target="_blank" href="http://ej2.syncfusion.com/documentation">documentation</a> section.
        </p>
    </div>
}
@section Title{
                    <title>ASP.NET MVC Circular Gauge Speedometer Example - Syncfusion Demos </title> 
                }
@section Meta{
                    <meta name="description" content="This example demonstrates the Speedometer in ASP.NET MVC Circular Gauge control. Explore here for more details."/>
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Speedometer in ASP.NET MVC Circular Gauge Control</h1>
                }
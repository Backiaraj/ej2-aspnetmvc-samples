@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section">
    <div style="text-align:center">

        @Html.EJS().Chart("container").Series(series =>
   {
       series.Width(2).XName("xValue").YName("yValue").Marker(mr=>mr.DataLabel(dl=>dl.Visible(true).Font(ff => ff.FontWeight("600").Color("#ffffff")))).IntermediateSumIndexes(ViewBag.intermediateSumIndexes).SumIndexes(ViewBag.sumIndexes).NegativeFillColor("#e56590").Name("USA").ColumnWidth(0.9).Type(Syncfusion.EJ2.Charts.ChartSeriesType.Waterfall).DataSource(ViewBag.dataSource).Add();
   }
   ).ChartArea(area => area.Border(br=>br.Width(0.1))).PrimaryXAxis(py => py.ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg=>mg.Width(0)).PlotOffset(20)).PrimaryYAxis(py => py.Minimum(0).Maximum(5000).Interval(1000).MajorGridLines(mg=>mg.Width(0)).Title("Expenditure")).Title("Company Revenue and Profit").LegendSettings(lg => lg.Visible(true)).Tooltip(tl => tl.Enable(true)).Load("load").TextRender("textRender").AxisLabelRender("axisLabelRender").Render()
    </div>
</div>


<style>
 @*custom code start*@
    #control-container {
        padding: 0px !important;
    }
 @*custom code end*@
    #container_Series_0_Connector_ {
        stroke-dasharray: 10px 10px;
        stroke-linejoin: round; stroke-linecap: round;
        -webkit-animation: dash 1s linear infinite;
        animation: dash 1s linear infinite;
    }

    @@-webkit-keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }
</style>
    <script>       
        var axisLabelRender = function (args) {
            if (args.axis.name === 'primaryYAxis') {
                args.text = '$' + Number(args.text) / 1000 + 'B';
            }
        };
        var textRender = function (args) {
            var value = Number(args.text) / 1000;
            value = Math.round((value * 100)) / 100;
            args.text = value.toString();
        };
         @*custom code start*@
        var load = function (args) {
            var selectedTheme = themeName ? themeName : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast');
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "60%";
        };
         @*custom code end*@
    </script>
}
 @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Waterfall in ASP.NET MVC Chart control. Explore here for more details."/>
                }
 @*custom code end*@
@section ActionDescription{
    <p>
    This sample visualizes the revenue and profits of a company by using default waterfall series in the chart. Tooltip shows the information about the profits earned by each department on the company.
</p>
}
@section Description{
    <p>
    In this example, you can see how to render and configure the Waterfall type chart. You can use <code>border</code> and 
    <code>fill</code> properties to customize the area. <code>dataLabel</code> is used to represent individual data
    and its value.
</p>
<p>
    Tooltip is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.
</p>
<p>
    More information on the Waterfall series can be found in this
    <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
</p>
}
@section Title{
                    <title>ASP.NET MVC Chart Waterfall Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Waterfall in ASP.NET MVC Chart Control</h1>
                }
@using Syncfusion.EJ2;
@section ControlsSection{
<div class="col-lg-12 control-section" style="text-align:center">

    @Html.EJS().Chart("container").ChartArea(area => area.Border(br => br.Color("transparent"))).Series(series =>
{
    series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Width(2).XName("x").YName("y").DataSource("series1").Name("Product X").Add();
    series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).Width(2).XName("x").YName("y").DataSource("series2").Name("Product Y").Add();
}).PrimaryXAxis(px => px.Skeleton("y").Title("Years").MajorGridLines(mg => mg.Width(0)).ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime).EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift).LabelFormat("y")
    ).PrimaryYAxis(py => py.Title("Price").LineStyle(ls => ls.Width(0)).MajorTickLines(mt => mt.Width(0)).MinorTickLines(mt=>mt.Width(0)).RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.None).LabelFormat("${value}").EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift).Title("Profit")
       ).Title("Stock Price Analysis").Tooltip(tt => tt.Enable(true).Shared(true)).Crosshair(cr => cr.Enable(true).Line(line=>line.Width(20).Color("rgba(204,214,235,0.25)")).LineType(Syncfusion.EJ2.Charts.LineType.Vertical)).LegendSettings(lg => lg.Visible(true)).Load("load").Render()

</div>
 @*custom code start*@
<style>
    #control-container {
        padding: 0px !important;
    }
</style>
 @*custom code end*@
<script>
    var series1 = [];
    var series2 = [];
    var point1;
    var point2;
    var value = 80;
    var value1 = 90;
    var i;
    for (i = 1; i < 500; i++) {
        if (Math.random() > .5) {
            value += Math.random();
            value1 += Math.random();
        }
        else {
            value -= Math.random();
            value1 -= Math.random();
        }
        point1 = { x: new Date(1960, (i + 1), i), y: Math.round(value) };
        point2 = { x: new Date(1960, (i + 1), i), y: Math.round(value1) };
        series1.push(point1);
        series2.push(point2);
    }
     @*custom code start*@
    var load = function (args) {
        var selectedTheme = themeName ? themeName : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast');
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "60%";
        }
    @*custom code end*@
</script>
}
 @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Local Data in ASP.NET MVC Chart control. Explore here for more details."/>
                }
 @*custom code end*@
@section ActionDescription{
    <p>
        This sample illustrates  plotting of local data about stock price analysis of two products for a certain period.
    </p>
}
@section Description{
        <p>The Chart supports local data binding. 
        The <code> <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#datasource-object---datamanager">dataSource</a></code> property can be assigned either with the array of JavaScript objects or instance of <code><a target="_blank" class="code"
        href="http://ej2.syncfusion.com/documentation/data/api-dataManager.html">DataManager</a></code>.</p>
        <p>In this demo, the array of JavaScript objects is assigned as the data source to the Chart.</p>
}
@section Title{
                    <title>ASP.NET MVC Chart Local Data Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Local Data in ASP.NET MVC Chart Control</h1>
                }
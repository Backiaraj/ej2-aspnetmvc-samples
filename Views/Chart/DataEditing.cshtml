@using Syncfusion.EJ2;
@section ControlsSection{
    <script src="~/Scripts/theme-color.js"></script>
    <div class="control-section">
        <div style="text-align:center">

            @Html.EJS().Chart("container").Series(series =>
           {

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column)
               .Marker(mr => mr.Visible(true).Width(10).Height(10))
               .XName("xValue").YName("y").DataSource(ViewBag.dataSource).Name("Product A").Width(2).Add();

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line)
               .Marker(mr => mr.Visible(true).Width(10).Height(10))
               .XName("xValue").YName("y1").DataSource(ViewBag.dataSource).Name("Product B").Width(2).Add();

           }).PrimaryYAxis(px => px.Minimum(0).Maximum(100).Interval(20).LineStyle(ls => ls.Width(0)).MajorTickLines(mt => mt.Width(0)).LabelFormat("{value}%").Title("Sales")
            ).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg => mg.Width(0)).LabelPlacement(Syncfusion.EJ2.Charts.LabelPlacement.OnTicks).Minimum("-0.5").Maximum("6.5")
            ).Tooltip(tr => tr.Enable(true)
            ).ChartArea(area => area.Border(br => br.Color("transparent"))
            ).Tooltip(tt => tt.Enable(true)
            ).LegendSettings(lg => lg.Visible(false)
            ).Title("Sales prediction of products").Load("load").Render()
        </div>
    </div>


    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>

    <script>

        var load = function (args) {
            @*custom code start*@
            var selectedTheme = themeName ? themeName : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast');
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "60%";
            args.chart.series[0].dragSettings.enable = true;
            args.chart.series[1].dragSettings.enable = true;
        }
    </script>
}
@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Data Editing in ASP.NET MVC Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <p>
        This sample describes data editing feature in chart. Drag and drop the points to change the <code>data values dynamically.</code>
    </p>
}
@section Description{
    <p>The draggable-points allows data to be moved around the chart. In addition to this, the module fires events such as dragStart, drag and dragComplete.</p>
    <br>
    <p>
        The draggable points allow data to be moved around the chart. In addition to this, the module fires events such as <code> dragStart, drag, and dragComplete</code>
    </p>
    <br>
    <p>
        More information on data editing can be found in this
        <a target="_blank" href="https://ej2.syncfusion.com/documentation/chart/data-editing/">documentation section</a>.

    </p>
}
@section Title{
                    <title>ASP.NET MVC Chart Data Editing Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Data Editing in ASP.NET MVC Chart Control</h1>
                }
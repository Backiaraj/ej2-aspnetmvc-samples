@using Syncfusion.EJ2;
@section ControlsSection{
    <div class="control-section">
        <div style="text-align:center">
            @Html.EJS().Chart("container").Series(
           series =>
           {
               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
               Name("Banana").
               XName("xValue").
               YName("yValue").
               Width(2).
               Marker(mr => mr.Visible(true).Width(10).Height(10)).
               DataSource(ViewBag.dashedDataSource).Add();

               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Line).
               Name("Apple").
               XName("xValue").
               YName("yValue1").
               Width(2).
               Marker(mr => mr.Visible(true).Width(10).Height(10).Shape(Syncfusion.EJ2.Charts.ChartShape.Diamond)).
               DashArray("10").
               DataSource(ViewBag.dashedDataSource).Add();

           }).PrimaryXAxis(
           xAxis =>
           {
               xAxis.ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime).
               IntervalType(Syncfusion.EJ2.Charts.IntervalType.Years).
               LabelFormat("y").MajorGridLines(mg=>mg.Width(0)).
               EdgeLabelPlacement(Syncfusion.EJ2.Charts.EdgeLabelPlacement.Shift);
           }).PrimaryYAxis(
           yAxis =>
           {
               yAxis.LabelFormat("{value}%").
			   RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.None).
               LineStyle(ls => ls.Width(0)).
               Interval(10).
               Minimum(0).
               Maximum(40).
               MajorTickLines(mt => mt.Width(0)).
               MinorTickLines(mt => mt.Width(0));
           }).Title("Fruits Production Statistics").Tooltip(
           tooltip =>
           {
               tooltip.Enable(true).
               Shared(true);
           }).Crosshair(
           crosshair =>
           {
               crosshair.Enable(true).
               LineType(Syncfusion.EJ2.Charts.LineType.Vertical).
               Line(li=>li.Color("rgba(204,214,235,0.25)").Width(20));
           }).ChartArea(area => area.Border(br=>br.Color("transparent"))).Load("load").Render()
        </div>
    </div>
 @*custom code start*@
    <style>
        #control-container {
        padding: 0px !important;
    }

    #container_Series_1,
    #container_Series_0 {
        stroke-dasharray: 10px 10px;
        stroke-linejoin: round; stroke-linecap: round;
        -webkit-animation: dash 1s linear infinite;
        animation: dash 1s linear infinite;
    }

    #container_Series_0_Point_3_Symbol {
        -webkit-animation: opac 1s ease-out infinite;
        animation: opac 1s ease-out infinite;
    }

    @@-webkit-keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes dash {
        100% {
            stroke-dashoffset: -20px;
        }
    }

    @@keyframes opac {
        0% {
            stroke-opacity: 1;
            stroke-width: 0px;
        }
        100% {
            stroke-opacity: 0;
            stroke-width: 10px;
        }
    }
    </style>
    <script>
        var load = function (args) {
            var selectedTheme = themeName ? themeName : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast');
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "60%";
        }
    </script>
     @*custom code end*@
}
@section ActionDescription{
    <p>
        This sample illustrates a line series with dash array. 
        Dashed lines are animated by using css animation.
    </p>
}
 @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Dashed Line in ASP.NET MVC Chart control. Explore here for more details."/>
                }
 @*custom code end*@
@section Description{
    <p>
        In this example, you can see how to render and configure the line type charts. Line type charts are used to represent time-dependent
        data, showing trends in data at equal intervals. You can use
        <code>dashArray</code>,
        <code>width</code>,
        <code>fill</code> properties to customize the line.
        <code>marker</code> and
        <code>dataLabel</code> are used to represent individual data and its value.
    </p>
    <p>
        Tooltip is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>
    <br>
    <p>
        More information on the line series can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Chart Dashed Line Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Dashed Line in ASP.NET MVC Chart Control</h1>
                }
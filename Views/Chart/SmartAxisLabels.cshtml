@using Syncfusion.EJ2;
<script src="~/Scripts/theme-color.js"></script>
@section ControlsSection{
    <div class="col-lg-9 control-section">
        <div class="content-wrapper">
            <div style="width:92%">
         @Html.EJS().Chart("container").Series(series =>
           {
               series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).XName("xValue").YName("yValue")
               .Marker(mr=>mr.DataLabel(dl=>dl.Visible(true).Position(Syncfusion.EJ2.Charts.LabelPosition.Top).Font(ff => ff.FontWeight("600").Color("#ffffff"))))
               .DataSource(ViewBag.dataSource).Name("Users")
        .Add();

                   }).PrimaryXAxis(px => px.LabelIntersectAction(Syncfusion.EJ2.Charts.LabelIntersectAction.Hide)
                   .Interval(1).ValueType(Syncfusion.EJ2.Charts.ValueType.Category).MajorGridLines(mg=>mg.Width(0))
        ).PrimaryYAxis(py => py.MajorGridLines(mg=>mg.Width(0)).MajorTickLines(mt=>mt.Width(0)).LineStyle(ls=>ls.Width(0)).LabelStyle(ls=>ls.Color("transparent"))
        ).Title("Internet Users in Millions").ChartArea(area => area.Border(br=>br.Color("transparent"))).Tooltip(tt => tt.Enable(true)).LegendSettings(lg => lg.Visible(false)).Load("load").PointRender("labelRender").Render()

        </div>
    </div>
        </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tbody>
                <tr style="height: 50px">
                    <td style="width: 40%">
                        <div>Intersect Action:</div>
                    </td>
                    <td style="width: 60%;">
                        <div>
                            @Html.EJS().DropDownList("selmode").Index(0).DataSource(ViewBag.data).Value("Hide").Change("valueChange").Width("120").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>Edge Label Placement:</div>
                    </td>
                    <td style="width: 40%;">
                        <div>
                            @Html.EJS().DropDownList("edgemode").Index(0).DataSource(ViewBag.data1).Value("None").Change("edgeModeChange").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>Label Position:</div>
                    </td>
                    <td style="width: 40%;">
                        <div>
                            @Html.EJS().DropDownList("position").Index(0).DataSource(ViewBag.data2).Value("Outside").Change("positionChange").Render()
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 50%">
                        <div>
                            Enable Trim:
                        </div>
                    </td>
                    <td style="width: 50%;">
                        <div>
                            <input type="checkbox" id="Trim" unchecked="">
                        </div>
                    </td>
                </tr>
                <tr style="height: 50px">
                    <td style="width: 60%">
                        <div>Maximum Label Width:</div>
                    </td>
                    <td style="width: 40%;">
                        <div style="margin-top: 0px;">
                            @Html.EJS().NumericTextBox("labelWidth").Change("widthChange").Value(34).Min(1).Width("120").Step(1).Render()

                        </div>
                    </td>
                </tr>
            </tbody>
        </table>
    </div>
         @*custom code start*@
<style>
    #control-container {
        padding: 0px !important;
    }
</style>
         @*custom code end*@
    <script>
        var labelRender = function (args) {
            var selectedTheme = themeName ? themeName : 'Material';
            if (selectedTheme && selectedTheme.indexOf('fabric') > -1) {
                args.fill = fabricColors[args.point.index % 10];
            }
            else if (selectedTheme === 'material') {
                args.fill = materialColors[args.point.index % 10];
            }
            else {
                args.fill = bootstrapColors[args.point.index % 10];
            }
        };
                 @*custom code start*@
        var load = function (args) {
            var selectedTheme = themeName ? themeName : 'Material';
            args.chart.theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast');

        };
                 @*custom code end*@
        var valueChange = function () {
            var chart = document.getElementById('container').ej2_instances[0];
            var selmode = document.getElementById('selmode').ej2_instances[0];
            chart.primaryXAxis.labelIntersectAction = selmode.value;
			chart.series[0].animation.enable = false;
            chart.refresh();
        }
        var edgeModeChange = function () {
            var chart = document.getElementById('container').ej2_instances[0];
            var edgemode = document.getElementById('edgemode').ej2_instances[0];
            chart.primaryXAxis.edgeLabelPlacement = edgemode.value;
			chart.series[0].animation.enable = false;
            chart.dataBind();
        }
        var positionChange = function () {
            var chart = document.getElementById('container').ej2_instances[0];
            var position = document.getElementById('position').ej2_instances[0];
            chart.primaryXAxis.labelPosition = position.value;
			chart.series[0].animation.enable = false;
            chart.refresh();
        }
        document.getElementById('Trim').onchange = function () {
            var chart = document.getElementById('container').ej2_instances[0];
            var element = (document.getElementById('Trim'));
            chart.primaryXAxis.enableTrim = element.checked;
            chart.refresh();
        };
        var widthChange= function () {
            var chart = document.getElementById("container").ej2_instances[0];
            var width = document.getElementById("labelWidth").ej2_instances[0];
            chart.series[0].animation.enable = false;
            chart.primaryXAxis.maximumLabelWidth = width.value;
			chart.series[0].animation.enable = false;
            chart.refresh();
        }
    </script>
}
         @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Smart Axis Labels in ASP.NET MVC Chart control. Explore here for more details."/>
                }
         @*custom code end*@
@section ActionDescription{
    <p>
    Labels in an axis can be placed smartly when it intersects with each other. Intersect action and edge label placement can be changed by using property panel.
</p>
}
@section Description{
    <p>
        In this example, you can see how to arrange the axis labels and how to trim the axis label smartly. When the Axis labels overlap with each other based on
        the chart dimensions and label size, you can use the <code>labelIntersectAction</code> property of the axis
        to avoid overlapping.
</p>
<p>
    Chart supports the following by which can be set using <code>labelIntersectAction</code> property.
</p>
<ul>
    <li><code>Hide</code> - Hide the label when it intersects.</li>
    <li><code>Trim</code> - Trim the label when it intersects.</li>
    <li><code>Wrap</code> - Wrap the label when it intersects.</li>
    <li><code>MultipleRows</code> - Arrange the label in multiple row when it intersects.</li>
    <li><code>Rotate45</code> - Rotate the label to 45 degree when it intersects.</li>
    <li><code>Rotate90</code> - Rotate the label to 90 degree when it intersects.</li>
    <li><code>None</code> - Shows all the labels.</li>
</ul>
<br>
<p>
    Chart supports three types of edge labels placement which can be set using the <code>edgeLabelPlacement</code> property.
</p>
<ul>
    <li><code>None</code> - No action will be performed.</li>
    <li><code>Hide</code> - Edge label will be hidden .</li>
    <li><code>Shift</code> - Shifts the edge labels.</li>
</ul>
<p>
    More information on the smart axis labels can be found in this
    <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-axis.html#valuetype-valuetype">documentation section</a>.
</p>
}
@section Title{
                    <title>ASP.NET MVC Chart Smart Axis Labels Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Smart Axis Labels in ASP.NET MVC Chart Control</h1>
                }
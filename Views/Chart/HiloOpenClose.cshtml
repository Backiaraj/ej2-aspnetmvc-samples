@using Syncfusion.EJ2;
@section ControlsSection{
    <script src="~/Scripts/stock-chart-data.js"></script>
    <div class="control-section">
        <div align="center">
            <h4 id="days" style="font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px;">AAPL Historical</h4>
        </div>
        <div style="text-align:center">
            @Html.EJS().Chart("container").Series(series =>
            {
                series.Type(Syncfusion.EJ2.Charts.ChartSeriesType.HiloOpenClose).XName("x").High("high").Low("low").Close("close")
                .Open("open").DataSource("chartData").Name("Warmest").Add();
            }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime)
            .MajorGridLines(mg=>mg.Width(0)).CrosshairTooltip(ct=>ct.Enable(true))
            ).PrimaryYAxis(py => py.RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.None)
            .MajorTickLines(mt=>mt.Width(0)).LineStyle(ls=>ls.Width(0)).Title("Price").LabelFormat("n0")
            ).ChartArea(area => area.Border(br=>br.Color("transparent"))).Crosshair(cr => cr.Enable(true)
            .Line(li=>li.Width(0.02)).LineType(Syncfusion.EJ2.Charts.LineType.Vertical)).Load("chartload").AxisLabelRender("axisLabelRender").LegendSettings(lg => lg.Visible(false)
                 ).Tooltip(tt => tt.Enable(true).Shared(true)).Render()
        </div>
    </div>

 @*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
 @*custom code end*@
    <script>
        var chartData = chartData;
         @*custom code start*@
        var selectedTheme = themeName ? themeName : 'Material';
        var theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast');
         @*custom code end*@
        var axisLabelRender = function (args) {
            if (args.axis.title === 'Price') {
                args.text = '$' + args.text;
            }
        };
         @*custom code start*@
        var chartload = function (args) {
            args.chart.theme = theme;
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "80%";
        }
         @*custom code end*@
        var loaded = function (args) {
            if (!ej.base.Browser.isDevice && document.getElementById('container_Secondary_Element')) {
                document.getElementById('container_Secondary_Element').style.transform = 'translate(13%)';
            }
        }
    </script>
}
 @*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Hilo Open Close in ASP.NET MVC Chart control. Explore here for more details."/>
                }
 @*custom code end*@
@section ActionDescription{
    <p>
        This sample visualizes the AAPL historical data with default HILO Open Close series in the chart.
        Tooltip and crosshair show the information about the data and period.
    </p>

}
@section Description{
    <p>
        In this example, you can see how to render and configure the Hilo Open Close type Series. You can use <code>border</code> and 
        <code>fill</code> properties to customize the area.
    </p>
    <p>
        Tooltip is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>
    <p>
        More information on the Hilo Open Close series can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Chart Hilo Open Close Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Hilo Open Close in ASP.NET MVC Chart Control</h1>
                }
@using Syncfusion.EJ2;
@section ControlsSection{
<script src="~/Scripts/financial-data.js"></script>
    <div class="control-section">
        <div align="center">
            <h4 id="days" style="font-family: Segoe UI;font-weight: 500; font-style:normal; font-size:15px;">AAPL Historical</h4>
           </div>
            <div style="text-align:center">

                @Html.EJS().Chart("container").Rows(rows =>
           {
               rows.Height("30%").Add();
               rows.Height("70%").Add();
           }).Axes(ax =>
           {
               ax.Name("secondary").
               RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.None).
               OpposedPosition(true).
               RowIndex(1).
               PlotOffset(30).
               Title("Price").LabelFormat("n0").
               LineStyle(ls=>ls.Width(0)).Add();
           }
           ).Series(series =>
           {
               series.Animation(animation=>animation.Enable(true)).Type(Syncfusion.EJ2.Charts.ChartSeriesType.Candle).XName("x").High("high").Low("low").Close("close").Open("open").DataSource("chartData").YAxisName("secondary").Name("Apple Inc").Add();
               series.Animation(animation => animation.Enable(true)).Type(Syncfusion.EJ2.Charts.ChartSeriesType.Column).XName("x").YName("volume").Name("Volume").DataSource("chartData").Add();
           }).PrimaryXAxis(px => px.ValueType(Syncfusion.EJ2.Charts.ValueType.DateTime).MajorGridLines(mg=>mg.Width(0)).CrosshairTooltip(ct=>ct.Enable(true))
       ).PrimaryYAxis(py => py.RangePadding(Syncfusion.EJ2.Charts.ChartRangePadding.None)
       .StripLines(sl=>sl.End("1300000000").Text("").StartFromAxis(true).Color("black").Opacity(0.03).Visible(true).ZIndex(Syncfusion.EJ2.Charts.ZIndex.Behind))
       .ValueType(Syncfusion.EJ2.Charts.ValueType.Logarithmic).OpposedPosition(true).Title("Volume").LineStyle(ls=>ls.Width(0))
       ).Crosshair(cr => cr.Enable(true).LineType(Syncfusion.EJ2.Charts.LineType.Vertical)).ChartArea(area => area.Border(br=>br.Color("transparent"))).Load("chartload").TooltipRender("tooltipRender").AxisLabelRender("axisLabelRender").PointRender("pointrender").LegendSettings(lg => lg.Visible(false)).Tooltip(tt => tt.Enable(true).Shared(true)).Width("60%").Render()


            </div>
        </div>

@*custom code start*@
    <style>
        #control-container {
            padding: 0px !important;
        }
    </style>
@*custom code end*@
    <script>
        var chartData = chartData;
        var pointColors = [];
        var zoomFactor, zoomPosition;
        var selectedTheme = themeName ? themeName : 'Material';
        var theme = (selectedTheme.charAt(0).toUpperCase() + selectedTheme.slice(1)).replace(/-dark/i, "Dark").replace(/contrast/i, 'Contrast');
        
        var tooltipRender = function (args) {
            if (args.series.index) {
                args.text = 'Volume : <b>' + getLabelText(args.text.split('<b>')[1].split('</b>')[0]) + '</b>';
            }
        }
        var axisLabelRender = function (args) {
            if (args.axis.name === 'primaryYAxis') {
                args.text = getLabelText(+args.text);
            }
            if (args.axis.name === 'secondary') {
                args.text = '$' + args.text;
            }
        };
        var pointrender = function (args) {
            if (args.series.type === 'Candle') { pointColors.push(args.fill); } else {
                args.fill = pointColors[args.point.index];
            }
        }
        var getLabelText = function (value) {
            return (((value) / 1000000000)).toFixed(1) + 'bn';
        };
       
        var chartload = function (args) {
            args.chart.theme = theme;
            args.chart.width = ej.base.Browser.isDevice ? "100%" : "80%";
        }
        var loaded = function (args) {
            if (!ej.base.Browser.isDevice && document.getElementById('container_Secondary_Element')) {
                document.getElementById('container_Secondary_Element').style.transform = 'translate(13%)';
            }
        }
    </script>
}
@*custom code start*@
@section Meta{
                    <meta name="description" content="This example demonstrates the Candle Stick in ASP.NET MVC Chart control. Explore here for more details."/>
                }
@*custom code end*@
@section ActionDescription{
    <p>
        This sample visualizes the AAPL historical data with default candle series in the chart. Tooltip and crosshair shows the information about the data and period.
   </p>
}
@section Description{
    <p>
        In this example, you can see how to render and configure the Candle type series. You can use the <code>border</code> and 
        <code>fill</code> properties to customize the area.
    </p>
    <p>
        Tooltip is enabled in this example. To see the tooltip in action, hover a point or tap on a point in touch enabled devices.
    </p>
    <p>
        More information on the Candle series can be found in this
        <a target="_blank" href="http://ej2.syncfusion.com/documentation/chart/api-series.html#type-chartseriestype">documentation section</a>.
    </p>
}
@section Title{
                    <title>ASP.NET MVC Chart Candle Stick Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Candle Stick in ASP.NET MVC Chart Control</h1>
                }
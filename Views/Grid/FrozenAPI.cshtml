@using Syncfusion.EJ2
@using Syncfusion.EJ2.Popups

@section ControlsSection{
    <div class="control-section">
        <div class="grid-freezeprop">
            <div class="grid-freezecol">
                <div class="grid-freezecol">
                    <span>
                        Column
                    </span>
                </div>
                <div class="grid-freezecol">
                    @Html.EJS().DropDownList("column").DataSource((IEnumerable<object>)ViewBag.columns).Change("columnChange").Value("ShipCountry").Fields(field => { field.Value("id").Text("name"); }).Render()
                </div>
            </div>
            <div class="grid-freezecol">
                <div class="grid-freezecol">
                    <span>
                        Freeze Direction
                    </span>
                </div>
                <div class="grid-freezecol">
                    @Html.EJS().DropDownList("FreezeDirection").DataSource((IEnumerable<object>)ViewBag.direction).Change("directionChange").Value("Left").Fields(field => { field.Value("id").Text("name"); }).Render()
                </div>
            </div>
        </div>
        @Html.EJS().Grid("FrozenGrid").DataSource((IEnumerable<object>)ViewBag.dataSource).Height("410").EnableHover(false).FrozenRows(2).Columns(col =>
   {

       col.Field("OrderID").HeaderText("Order ID").Width("120").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
       col.Field("Freight").HeaderText("Freight").Width("125").Format("C2").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
       col.Field("CustomerID").HeaderText("Customer ID").Width("130").Freeze(Syncfusion.EJ2.Grids.FreezeDirection.Right).Add();
       col.Field("OrderDate").HeaderText("Order Date").Width("150").Format("yMd").TextAlign(Syncfusion.EJ2.Grids.TextAlign.Right).Add();
       col.Field("ShipName").HeaderText("Ship Name").Width("300").Add();
       col.Field("ShipAddress").HeaderText("Ship Address").Width("270").Add();
       col.Field("ShipCity").HeaderText("Ship City").Width("250").Add();
       col.Field("ShipCountry").HeaderText("Ship Country").Width("250").Freeze(Syncfusion.EJ2.Grids.FreezeDirection.Left).Add();

   }).Render()
        @Html.EJS().Dialog("AlertDialog").Header("Frozen").Content("Atleast one Column should be in movable").ShowCloseIcon(false).Target(".control-section").Width("300px").Visible(false).AnimationSettings(new DialogAnimationSettings() { Effect = DialogEffect.None }).Buttons(ViewBag.DefaultButtons).Render()
    </div>

    <style>
        .grid-freezeprop {
            padding-bottom: 5px;
        }

        .grid-freezecol {
            display: inline-block;
            padding-right: 10px;
        }
    </style>

    <script>
        var refresh = true;
        function columnChange(e) {
            var grid = document.getElementById("FrozenGrid").ej2_instances[0];
            var columnName = e.value;
            var column = grid.getColumnByField(columnName);
            var directionDropDown = document.getElementById("FreezeDirection").ej2_instances[0];
            var value = column.freeze === undefined ? 'Center' : column.freeze;
            refresh = directionDropDown.value === value;
            directionDropDown.value = value;
        }

        function directionChange(e) {
            if (refresh) {
                var grid = document.getElementById("FrozenGrid").ej2_instances[0];
                var columnName = document.getElementById("column").ej2_instances[0].value;
                var mvblColumns = grid.getMovableColumns();
                if (mvblColumns.length === 1 && columnName === mvblColumns[0].field && e.value !== mvblColumns[0].freeze) {
                    document.getElementById("AlertDialog").ej2_instances[0].show();
                    refresh = false; this.value = "Center"; this.refresh();
                } else {
                    grid.getColumnByField(columnName).freeze = e.value === 'Center' ? undefined : e.value;
                    grid.refreshColumns();
                }
            }
            refresh = true;
        }
        function alertDlgBtnClick() {
            document.getElementById("AlertDialog").ej2_instances[0].hide();
        }
    </script>
}
}
@section ActionDescription{
    <div id="action-description">
        <p>
            This sample demonstrates the frozen rows and columns feature of the Grid. Scroll the movable content vertically/horizontally to view the frozen rows/columns
            with the content.
        </p>
    </div>
}

@section Meta{
    <meta name="description" content="This example demonstrates the Frozen Rows And Columns in ASP.NET MVC Data Grid control. Explore here for more details." />
}

@section Description{
    <div id="description">
        <p>
            The freezing feature enables the user to freeze certain rows/columns at both sides to scroll remaining movable content. This can be achieved by setting <code>Freeze</code> property in column settings.
        </p>
        <p>
            In this demo sample, the <b>ShipCountry</b> column freezed at left side and <b>CustomerID</b> column freezed at right side using <code>Column->Freeze</code>property.
        </p>
    </div>
}


@section Title{
    <title>ASP.NET MVC Data Grid Frozen Rows And Columns Example - Syncfusion Demos </title>
}
@section Header{
    <h1 class='sb-sample-text'>Example of Frozen Rows And Columns in ASP.NET MVC Data Grid Control</h1>
}
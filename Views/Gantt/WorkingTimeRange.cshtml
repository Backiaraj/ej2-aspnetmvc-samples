@using Syncfusion.EJ2
@{
    ViewBag.Title = "WorkingTimeRange";
}

@section ControlsSection{
<div class="col-lg-9 control-section">
    <div class="content-wrapper">
        @(Html.EJS().Gantt("WorkingTimeRange").DataSource((IEnumerable<object>)ViewBag.DataSource).Height("450px")
            .TaskFields(ts => ts.Id("TaskId").Name("TaskName").StartDate("StartDate").EndDate("EndDate").Duration("Duration").Progress("Progress")
            .Dependency("Predecessor").Child("SubTasks")).TreeColumnIndex(1)
            .Columns(col =>
                {
                    col.Field("TaskId").Width(80).Add();
                    col.Field("TaskName").Width(250).Add();
                    col.Field("StartDate").Add();
                    col.Field("EndDate").Add();
                    col.Field("Duration").Add();
                    col.Field("Progress").Add();
                    col.Field("Predecessor").Add();
                })
            .TimelineSettings(ts => ts.TopTier(tt => tt.Unit(Syncfusion.EJ2.Gantt.TimelineViewMode.Day)).BottomTier(bt => bt.Unit(Syncfusion.EJ2.Gantt.TimelineViewMode.Hour)))
            .DurationUnit(Syncfusion.EJ2.Gantt.DurationUnit.Hour)
            .LabelSettings(ls => ls.LeftLabel("TaskName"))
            .ProjectStartDate("04/02/2019")
            .ProjectEndDate("04/28/2019")
            .Render()
        )
    </div>
</div>

    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%;">
            <colgroup>
                <col style="width:55%" />
                <col style="width:45%" />
            </colgroup>
            <tr>
                <td style="width:100%">
                    <div style="font-size: 15px;">Work Start Time</div>
                </td>
            </tr>
            <tr>
                <td style="width:100%">
                    <div style="padding-top: 0px; width: 150px">
                        @(Html.EJS().NumericTextBox("WorkStartTime").Min(0).Max(24).Value(8).Change("UpdateTime").ShowSpinButton(true).Step(0.5).Width("150px")
                            .Render()
                        )
                    </div>
                </td>
            </tr>
            <tr>
                <td style="width:100%">
                    <div style="font-size: 15px;">Work End Time</div>
                </td>
            </tr>
            <tr>
                <td style="width:45%">
                    <div style="padding-top: 0px; width: 150px"">
                        @(Html.EJS().NumericTextBox("WorkEndTime").Min(0).Max(24).Value(17).Change("UpdateTime").ShowSpinButton(true).Step(0.5).Width("150px")
                            .Render()
                        )
                    </div>
                </td>
            </tr>
        </table>
    </div>

    <script>
        var isTimeUpdated = false;
        function UpdateTime() {
            var ganttChart = document.getElementById("WorkingTimeRange").ej2_instances[0];
            var defaultDate = "08/08/2016", startDate = new Date(defaultDate), endDate = new Date(defaultDate);
            var decPlace = WorkStartTime.value - Math.floor(WorkStartTime.value);
            startDate.setHours(WorkStartTime.value);
            startDate.setMinutes(decPlace * 60);
            decPlace = WorkEndTime.value - Math.floor(WorkEndTime.value);
            endDate.setHours(WorkEndTime.value);
            endDate.setMinutes(decPlace * 60);

            /*Validate time value and update the time range*/
            if (startDate.getTime() < endDate.getTime() && isTimeUpdated == false) {
                var workingTime = [{ from: WorkStartTime.value, to: WorkEndTime.value }];
                ganttChart.dayWorkingTime = workingTime;
                isTimeUpdated = false;
            }
            else {
                isTimeUpdated = true;
                WorkStartTime.value = ganttChart.dayWorkingTime[0].from;
                WorkEndTime.value = ganttChart.dayWorkingTime[ganttChart.dayWorkingTime.length - 1].to;
            }
            isTimeUpdated = false;
        }
    </script>
}

@section ActionDescription{
    <div id="action-description">
        <p>
            This sample visualizes the support for changing the working hours in a day. The selected start and end hours from the property panel will be applied to each task available in the project.
        </p>
    </div>
}

@section Meta{
                    <meta name="description" content="This example demonstrates the Working Time Range in ASP.NET MVC Gantt control. Explore here for more details."/>
                }

@section Description{
    <div id="description">
        <p>
            In this example, you can see how to render a Gantt chart with the provided data source and customizable working hours in a day. You can split the working hours in a day to one or more range. So, You can also provide the <code>DayWorkingTime</code> property value as array of object collection. Gantt chart also supports different <code>DurationUnit</code> values as follows:
            <li><code>Day</code></li>
            <li><code>Hour</code></li>
            <li><code>Minute</code></li>
        </p>
        <p>
            Given duration in dataSource will be considered with this unit. In this demo, the <code>Hour</code> unit is used to render taskbars in day hour timeline mode. Gantt chart supports only 24hours format as of now. The working hours will differ between organizations. This feature will be helpful to keep track of each task and resource task status based on the working time of company.
        </p>
    </div>
}

@section Title{
                    <title>ASP.NET MVC Gantt Working Time Range Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Working Time Range in ASP.NET MVC Gantt Control</h1>
                }
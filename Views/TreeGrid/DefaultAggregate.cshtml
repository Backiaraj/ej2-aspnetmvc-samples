@using Syncfusion.EJ2
@using Syncfusion.EJ2.Grids

@*custom code start*@

@{
    ViewBag.Title = "DefaultAggregate";
}

@*custom code end*@

@section ControlsSection{
    <div class="col-lg-9 control-section">
        <div class="control-section">
            @(Html.EJS().TreeGrid("DefaultAggregate")
                                        .DataSource((IEnumerable<object>)ViewBag.datasource)
                                        .Columns(col =>
                                        {
                                            col.Field("orderID").HeaderText("Order ID").Width(90).TextAlign(TextAlign.Right).Add();
                                            col.Field("orderName").HeaderText("Order Name").Width(190).Add();
                                            col.Field("orderDate").HeaderText("Order Date").Format("yMd").Width(140).Add();
                                            col.Field("units").HeaderText("Units").TextAlign(TextAlign.Right).Width(130).Add();
                                            col.Field("unitPrice").HeaderText("Unit Price").TextAlign(TextAlign.Right).Width(130).Add();
                                        })
                                       .Aggregates(agg =>
                                       {
                                           agg.ShowChildSummary(true);
                                           agg.Columns(new List<Syncfusion.EJ2.TreeGrid.TreeGridAggregateColumn>() {
                    new Syncfusion.EJ2.TreeGrid.TreeGridAggregateColumn() {
                        Field = "units", ColumnName = "units", Type = "Min", FooterTemplate = "Minimum: ${Min}" },
                     new Syncfusion.EJ2.TreeGrid.TreeGridAggregateColumn() {
                       Field = "unitPrice", ColumnName = "unitPrice", Type = "Max", FooterTemplate = "Maximum: ${Max}" }
                                           }).Add();
                                       })
                                       .ChildMapping("subTasks")
                                       .TreeColumnIndex(1)
                                       .Height(350)
                                       .Render()
            )
        </div>
    </div>
    <div class="col-lg-3 property-section">
        <table id="property" title="Properties" style="width: 100%">
            <tr>
                <td style="width: 50%">
                    <div>Show Child Summary</div>
                </td>
                <td style="width: 50%;padding-right: 10px;">
                    <div>
                        @Html.EJS().CheckBox("checked").Change("OnChange").Checked(true).Render()
                    </div>
                </td>
            </tr>
        </table>
    </div>
    <script>
        function OnChange(args) {
            if (args.checked) {
                var treegrid = document.getElementById("DefaultAggregate").ej2_instances[0];
                treegrid.aggregates[0].showChildSummary = true;
                treegrid.refresh();
            } else {
                var treegrid = document.getElementById("DefaultAggregate").ej2_instances[0];
                treegrid.aggregates[0].showChildSummary = false;
                treegrid.refresh();
            }
        }
     </script>
}

@*custom code start*@

@section Meta{
                    <meta name="description" content="This example demonstrates the Default Aggregate in ASP.NET MVC Tree Grid control. Explore here for more details."/>
                }


@section ActionDescription{
    <div id="action-description">
        <p>This sample demonstrates aggregate functionality of the Tree Grid. In this sample, the aggregate value for the columns "Units" and "Unit Price" is displayed in column footer and provide an option to show child summary.</p>
    </div>
}

@section Description{
    <div id="description">
        <p>
            The Tree Grid supports aggregates which will be displayed at the footer and every hierarchy level.
            The aggregate configurations can be provided by the <code>
                aggregates
            </code> property.
        </p>
        <p>The built-in aggregates are,</p>
        <ul>
            <li><code>Sum</code></li>
            <li><code>Average</code></li>
            <li><code>Min</code></li>
            <li><code>Max</code></li>
            <li><code>Count</code></li>
            <li><code>TrueCount</code></li>
            <li><code>FalseCount</code></li>
            <li>
                <code>Custom</code> - Requires the <code>customAggregate</code> property to perform aggregation.
                The custom aggregate value can be accessed inside template using the key <code>${custom}</code>
            </li>
        </ul>
        <p>
            In this demo, the <code>footerTemplate</code> property is used to display three different aggregates in the Tree Grid footer.
            <ul>
                <li>Showing minimum aggregate for "Units" column and the footerTemplate using its type name as <code>(${Min})</code>.</li>
                <li>Showing maximum aggregate for "Unit Price" column and the footerTemplate using its type name as <code>(${Max})</code>.</li>
            </ul>
        </p>
        <p>The template expression should be provided inside <code>${...}</code> the interpolation syntax.</p>
        <p>
            More information about aggregate can be found in this documentation section.
        </p>
    </div>

}

@*custom code end*@
@section Title{
                    <title>ASP.NET MVC Tree Grid Default Aggregate Example - Syncfusion Demos </title> 
                }
@section Header{
                    <h1 class='sb-sample-text'>Example of Default Aggregate in ASP.NET MVC Tree Grid Control</h1>
                }
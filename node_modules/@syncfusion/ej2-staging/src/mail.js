'use strict'
var gulp = require('gulp');
var fs = require('fs');
var common = require('./common');
var email = require('emailjs');
var branchName = process.env.BRANCH_NAME;
var isReleaseBranch = /^(release\/)/g.test(branchName);
var isHotfixBranch = /^(hotfix\/)/g.test(branchName);
var mailTemplate = fs.readFileSync(__dirname + '/template/mail-content.template', 'utf-8');
var currentBranch = isHotfixBranch ? 'hotfix' : isReleaseBranch ? 'release' : 'development';

gulp.task('publish-report', async function () {
    var platform = process.argv[4];
    var platformName = '';
    var status = 'Success ';
    switch (platform) {
        case (platform.indexOf('Blazor') > -1 ? platform : ''):
            platformName = 'Blazor';
            break;
        case (platform.indexOf('aspnetcore') > -1 ? platform : ''):
            platformName = 'EJ2 ASP.NET Core';
            break;
        case (platform.indexOf('aspnetmvc') > -1 ? platform : ''):
            platformName = 'EJ2 ASP.NET MVC';
            break;
    }

    if (!fs.existsSync('./mail-content.html')) {
        await mailContent(platform, 'Failure');
        status = 'Failure ';
    }
    var subject = `${platformName} Sample Browser ${branchName} branch publishing - ${status} - ${common.GetISTDateAndTime()}`;
    await mailReport(fs.readFileSync('./mail-content.html', 'utf-8'), subject, platformName);
});

async function publishReportforSources(){
    var platform = process.argv[4];
    var platformName = '';
    var status = 'Success ';
    switch (platform) {
        case (platform.indexOf('blazorSource') > -1 ? platform : ''):
            platformName = 'Blazor Source';
            break;
        case (platform.indexOf('aspCoreSource') > -1 ? platform : ''):
            platformName = 'Asp.Net core Source';
            break;
    }
    if (!fs.existsSync('./mail-content.html')) {
        await mailContent(platform, 'Failure');
        status = 'Failure ';
    }
    var subject = `${platformName} ${branchName} branch publishing - ${status} - ${common.GetISTDateAndTime()}`;
    await mailReport(fs.readFileSync('./mail-content.html', 'utf-8'), subject, platformName);
}
exports.publishReportforSources = publishReportforSources;

async function mailContent(platform, buildStatus, sendMail = false) {
    if (fs.existsSync('./Blazor-Server-Demos/BlazorServerDemos_NET6.csproj') || fs.existsSync('./EJ2CoreSampleBrowser_NET6.csproj') || fs.existsSync('./EJ2MVCSampleBrowser.csproj') || fs.existsSync('./Syncfusion.Blazor/Syncfusion.Blazor.csproj') || fs.existsSync('./src/Syncfusion.EJ2_MVC5.csproj')) {
        var platformList = []; var commonPlatformList = []; var platformName = ''; var repoName = '';
        var stage = process.argv[6];
        fs.writeFileSync('./mail-content.html', mailTemplate, 'utf-8');
        switch (platform) {
            case (platform.indexOf('blazorSource') > -1 ? platform : ''):
                platformName = 'Blazor Source';
                repoName = 'ej2-blazor-source';
                commonPlatformList = common.blazorSourcePlatform;
                break;
            case (platform.indexOf('aspCoreSource') > -1 ? platform : ''):
                platformName = 'ASP.NET Core/MVC Source';
                repoName = 'ej2-asp-core';
                commonPlatformList = common.aspCoreSourcePlatform;
                break;
            case (platform.indexOf('Blazor') > -1 ? platform : ''):
                platformName = 'Blazor';
                repoName = 'ej2-blazor-samples';
                commonPlatformList = common.blazorPlatform;
                break;
            case (platform.indexOf('aspnetcore') > -1 ? platform : ''):
                platformName = 'EJ2 ASP.NET Core';
                repoName = 'ej2-aspcore-samples';
                commonPlatformList = common.corePlatform;
                break;
            case (platform.indexOf('aspnetmvc') > -1 ? platform : ''):
                platformName = 'EJ2 ASP.NET MVC';
                repoName = 'ej2-aspmvc-samples';
                commonPlatformList = common.mvcPlatform;
                break;
        }
        if (buildStatus === 'Success' && !platform.includes('Source')) {
            var index = commonPlatformList.indexOf(platform);
            if (index > -1) {
                platformList = commonPlatformList.splice(index, 1)
            }
        } else {
            platformList = commonPlatformList;
            commonPlatformList = [];
        }
        for (var sample of platformList) {
            var status = ''; var lastPublish = ''; var buildFailure = '';
            mailTemplate = fs.readFileSync('./mail-content.html', 'utf-8');
            if (!platform.includes('aspCoreSource')) {
                var url = common.publishUrl[sample].replace('{branch}', isHotfixBranch ? 'hotfix' : isReleaseBranch ? 'release' : 'development');
            }
            if (buildStatus === 'Success') {
                if (platform.includes('Source')) {
                    lastPublish = common.GetISTDateAndTime('time');
                    status = `<p><a style="color:green;text-decoration:none;" href="${process.env.BUILD_URL}">Success</a></p>`;
                    buildFailure = '-';
                    mailTemplate = mailTemplate.replace('Sample Browser', '');
                    mailTemplate = mailTemplate.replace('Last Published', 'Build success Date and Time');
                    mailTemplate = mailTemplate.replace('<th>Published URL</th>', '');
                    if(platform.includes('blazorSource')){
                        var topic='<th>Package Published Location</th></tr>'
                        mailTemplate=mailTemplate.replace('</tr>',topic);
                        url = `<a href="${url}">blazor-${branchName}</a>`;
                    }
                }
                else{
                    url = `<a href="${url}">${url}</a>`;
                    lastPublish = common.GetISTDateAndTime('time');
                    status = `<p><a style="color:green;text-decoration:none;" href="${process.env.BUILD_URL}">Success</a></p>`;
                    buildFailure = '-';
                }
            }
            else {
                if (platform.includes('Source')) {
                    lastPublish = common.GetISTDateAndTime('time');
                    status = `<p style="color:red;">${buildStatus}</p>`;
                    buildFailure = `<a href="${process.env.BUILD_URL}">${process.env.BUILD_URL}</a>`;
                    mailTemplate = mailTemplate.replace('Sample Browser', '');
                    mailTemplate = mailTemplate.replace('Last Published', 'Build Failure Date and Time')
                    mailTemplate = mailTemplate.replace('<th>Published URL</th>', '');
                    if(platform.includes('blazorSource')){
                        var topic='<th>Package Published Location</th><th>Failure occured stage</th></tr>'
                        mailTemplate=mailTemplate.replace('</tr>',topic);
                        url = '-';
                    }
                }
                else {
                    url = '-';
                    lastPublish = '-';
                    status = `<p style="color:red;">${buildStatus}</p>`;
                    buildFailure = `<a href="${process.env.BUILD_URL}">${process.env.BUILD_URL}</a>`;
                }
            }
            if (platform.includes('aspCoreSource')) {
                var content = `<tr><td>${common.demoNames[sample]}</td><td>${status}</td><td>${buildFailure}</td><td>${lastPublish}</td></tr></table>`;
            }
            else if(platform.includes('blazorSource') && buildStatus=='Failure'){
                var content = `<tr><td>${common.demoNames[sample]}</td><td>${status}</td><td>${buildFailure}</td><td>${lastPublish}</td><td>${url}</td><td>${stage}</td></tr></table>`;
            }
            else {
                var content = `<tr><td>${common.demoNames[sample]}</td><td>${status}</td><td>${buildFailure}</td><td>${lastPublish}</td><td>${url}</td></tr></table>`;
            }
            mailTemplate = mailTemplate.replace('</table>', content);
            fs.writeFileSync('./mail-content.html', mailTemplate, 'utf-8');
        }
        if (!commonPlatformList.length) {
            var branch = `<a href="https://github.com/essential-studio/${repoName}/tree/${branchName}/">${branchName}</a>`;
            mailTemplate = mailTemplate.replace('{{Platform}}', platformName).replace('{{BranchName}}', branch);
            fs.writeFileSync('./mail-content.html', mailTemplate, 'utf-8');
        }
        if (!commonPlatformList.length && sendMail) {
            if(platform.includes('Source')){
                var subject = `${platformName} ${branchName} branch publishing - ${buildStatus} - ${common.GetISTDateAndTime()}`;
                await mailReport(fs.readFileSync('./mail-content.html', 'utf-8'), subject, platformName);
            }
            else{
                var subject = `${platformName} Sample Browser ${branchName} branch publishing - ${buildStatus} - ${common.GetISTDateAndTime()}`;
                await mailReport(fs.readFileSync('./mail-content.html', 'utf-8'), subject, platformName);
            }
        }
    }
}
exports.mailContent = mailContent;

async function mailReport(mailTemplate, subjectContent, platformName) {
    var server = new email.SMTPClient({
        user: 'automation@syncfusion.com',
        password: 'mjkbwpxmyzlkrpjq',
        host: 'smtp-mail.outlook.com',
        timeout: 50000,
        tls: { ciphers: 'SSLv3' },
    });

    var message = {
        from: 'automation@syncfusion.com',
        to: 'ej2@syncfusion.com',
        cc: 'sivakumarr@syncfusion.com, rajendranr@syncfusion.com, silambarasani@syncfusion.com, ej2core@syncfusion.com, bharatram.h@syncfusion.com',
        subject: subjectContent,
        attachment: [{ data: mailTemplate, alternative: true }]
    };

    try {
        await server.sendAsync(message);
        console.log(`\n${platformName} publish report sent Successfully.`);
    } catch (err) {
        console.log('Sample Browser mail report not sent: ' + err);
    }
}

/* sent mail via smtp mail client server - lazor Bunit Tests Results */
async function mailTestResults(checkStatus, mailTemplate, control, recipient, reportPath) {
    var subStatus= 'Failure';
    if(checkStatus.indexOf('<span class="failedTests">0</span>') > -1){
        subStatus= 'Success';
    }
    if(control == "Overall" && checkStatus == ''){
        subStatus= 'Consolidated';
    }
    var subjectContent = `Blazor Bunit Test automation ${currentBranch} branch CI - ${subStatus} - ${control} - ${common.GetISTDateAndTime()}`;
    var server = new email.SMTPClient({
        user: 'automation@syncfusion.com',
        password: 'mjkbwpxmyzlkrpjq',
        host: 'smtp-mail.outlook.com',
        timeout: 50000,
        tls: { ciphers: 'SSLv3' },
    });

    var message = {
        from: 'automation@syncfusion.com',
        to: recipient,
        cc: 'ej2core@syncfusion.com, sivakumarr@syncfusion.com, EJ2ProductOwners@syncfusion.com',
        subject: subjectContent,
        attachment: [{ data: mailTemplate, alternative: true },{ path: reportPath, type: 'application/html', name: control + '-Report.html'}]
    };
    try {
        await server.sendAsync(message);
        console.log(`\nBlazor Bunit Test automation - ${control}'s report sent Successfully.`);
    }
    catch (err) {
        console.log('Blazor tests automation mail report not sent: ' + err);
    }
}
exports.mailTestResults = mailTestResults;

var zipFolder = require('zip-folder');
var fs = require('fs');
var shelljs = require('shelljs');
var gulp = require('gulp');
var config = fs.existsSync('./config.json') ? JSON.parse(fs.readFileSync('./config.json')) : {};
console.log('............... Config File Details : ' + JSON.stringify(config));
var packJson = JSON.parse(fs.readFileSync('./package.json'));
var appName = config.appName ? config.appName : packJson.name.replace('ej2-aspcore-', '');
console.log('........ App Name is : ' + appName);
var isReleaseBranch = /^((release\/|hotfix\/))/g.test(process.env.BRANCH_NAME);
var publishApp = require('./publish');

gulp.task('azure-core-publish', function (done) {
    fs.writeFileSync('./App_Offline.htm', fs.readFileSync(__dirname + '/template/App_Offline.template', 'utf-8'), 'utf-8');
    fs.existsSync('./aspnetcore-net6.zip') ? shipFolder(['aspnetcore', 'aspnetcore-net6.zip'], done) : shipFolder('aspnetcore', done);
});

gulp.task('azure-mvc-publish', function (done) {
    fs.writeFileSync('./App_Offline.htm', fs.readFileSync(__dirname + '/template/App_Offline.template', 'utf-8'), 'utf-8');
    shipFolder('aspnetmvc', done);
});

gulp.task('ci-report', function (done) {
    done();
});

// Install log task.
gulp.task('ls-log', function () {
    shelljs.mkdir('-p', './cireports/logs');
    shelljs.exec('npm ls >./cireports/logs/install.log');
});

gulp.task('aspmvc-build', function () {
    var projectFile = process.argv[4];
    var restore = shelljs.exec('nuget restore', { silent: false });
    var publish = shelljs.exec('msbuild /verbosity:m ' + projectFile + ' /p:Configuration=Release /p:outdir="output" ', { silent: false });
    if (restore.code !== 0 || publish.code !== 0) {
        process.exit(1);
    }
    shelljs.mkdir('-p', './' + appName);
    var shippedPath = projectFile.replace('./', '').replace('.csproj', '');
    shelljs.cp('-rf', './output/_PublishedWebsites/' + shippedPath + '/*', appName);
});

gulp.task('aspcore-build', async function () {
    var projectName = process.argv[4];
    var restore; var publish; var option = ''; var noRestore = '--no-restore';
    if (fs.existsSync('./src/EJ2APIServices.csproj') || fs.existsSync('EJ2CoreSampleBrowser_NET6.csproj')) {
        var appsettingsPath = fs.existsSync('EJ2CoreSampleBrowser_NET6.csproj') ? './appsettings.json' : './src/appsettings.json';
        var appSettings = JSON.parse(fs.readFileSync(appsettingsPath, 'utf-8'));
        if (appSettings['ConnectionStrings'] === undefined) {
            appSettings['ConnectionStrings'] = {};
        }
        appSettings.ConnectionStrings.Redis = JSON.parse(fs.readFileSync(`${__dirname}/../config.json`, 'utf8')).ConnectionStrings.Redis;
        fs.writeFileSync(appsettingsPath, JSON.stringify(appSettings), 'utf-8');
        option = '/p:REDIS=true';
        noRestore = '';
    }
    if (projectName) {
        appName = projectName === 'EJ2CoreSampleBrowser_NET6.csproj' ? 'aspnetcore-net6' : appName;
        restore = shelljs.exec(`dotnet restore "${projectName}"`, { silent: false });
        publish = shelljs.exec(`dotnet publish "${projectName}" ${option} -c Release -o ${appName} ${noRestore}`, { silent: false });
    } else {
        restore = shelljs.exec('dotnet restore', { silent: false });
        publish = shelljs.exec(`dotnet publish ${option} -c Release -o ${appName} ${noRestore}`, { silent: false });
    }
    if (restore.code !== 0 || publish.code !== 0) {
        process.exit(1);
    }
    if (appName === 'aspnetcore-net6') {
        zipFolder('./' + appName, './' + appName + '.zip', function (err) {
            if (err) {
                console.log('Error :', err);
            } else {
                shelljs.rm('-rf', appName);
            }
        });
    }
    if (config.isServices) {
        shelljs.mkdir('-p', './' + appName);
        shelljs.cp('-rf', './src/' + appName + '/*', appName);
    }
    else if (config.isBlazor) {
        shelljs.mkdir('-p', './' + appName);
        shelljs.cp('-rf', './ej2-blazor-samples/' + appName + '/*', appName);
    }
});

function shipFolder(platform, done) {
    var branchName = process.env.BRANCH_NAME;
    if(config.isBlazor){
        var indexFile = fs.readFileSync('./' + appName + '/ej2-blazor-samples/dist/index.html', 'UTF8');
        var string = '<base href="/' + process.env.BRANCH_NAME + '/' + appName + '/"' + ' />'
        indexFile = indexFile.replace(/<base.*/g, string);
        fs.writeFileSync('./' + appName + '/ej2-blazor-samples/dist/index.html', indexFile, 'UTF8');
    }
    if (isReleaseBranch) {
        var releaseVersion = getReleaseVersion(process.env.BRANCH_NAME.split(/hotfix\/|release\//)[1].replace(/(_SP1|_SP2)/g, ''));
    }
    var path = branchName === 'master' ? 'site/production' : 'site/development';
    path = isReleaseBranch ? 'site/hotfix/' + releaseVersion : path;
    if (config.isShowCase) {
        path = path + '/' + 'showcase' + '/' + platform;
    }
    var publishSettingsPath = __dirname + '/../ej2npmci.PublishSettings';
    if (config.isServices) {
        publishSettingsPath = __dirname + '/../ej2services.PublishSettings';
    }
    publishApp.deployFolder(publishSettingsPath, platform, path, done);
}

function getReleaseVersion(version) {
    version = version.split('.');
    version.splice(2, 1);
    return version.join('.');
}

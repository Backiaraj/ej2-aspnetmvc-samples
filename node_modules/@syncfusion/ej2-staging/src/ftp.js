'use strict';

var fs = require('fs');
var gulp = require('gulp');
var shelljs = require('shelljs');
var gutil = require('gulp-util');
var ftp = require('vinyl-ftp');

var conn = ftp.create({
    host: process.env.FTP_HOST,
    user: process.env.FTP_USER,
    password: process.env.FTP_PASSWORD,
    parallel: 1000,
    log: gutil.log
});

var defaultConfig = {
    isShowCase: false,
    deploy: ['deploy/**'],
    base: 'deploy'
};


var config = fs.existsSync('./config.json') ? Object.assign({}, defaultConfig, JSON.parse(fs.readFileSync('./config.json'))) : defaultConfig;

gulp.task('deploy', function() {
    var branchName = process.env.BRANCH_NAME;
    var packageJson = JSON.parse(fs.readFileSync('./package.json'));
    var isSamples = packageJson.name.indexOf('-samples') !== -1;
    var randomNumber = Math.floor((Math.random() * 1000) + 1);

    // get the root folder name
    var rootFolder = branchName === 'master' ? 'production/' : 'development/';
    rootFolder = branchName.startsWith('hotfix-') ? `hotfix/${branchName.split('hotfix-')[1]}/` : rootFolder;
    // get the platform name
    var platformName = (config.isShowCase || isSamples) ? packageJson.name.split('-')[1] + '/' : '';
    // get showcase sample name
    var appName = packageJson.name.split('ej2-' + platformName.replace('/', '') + '-')[1];
    // get the deploy location
    var deployLocation = config.isShowCase ? 'showcase/' + appName : isSamples ? 'demos' : packageJson.name.replace(/ej2-/, '');
    var folderName = deployLocation + randomNumber;
    // create remote upload path
    config.remotePath = '/' + rootFolder + platformName + folderName;
    // get real path
    config.realPath = '/' + rootFolder + platformName + deployLocation;
    
    // stop dotnet.exe for aspcore related samples
    if (packageJson.name.indexOf('aspcore') !== -1 || packageJson.name === 'ej2-web-services') {
        shelljs.exec('curl -d "" -X POST https://ej2services.syncfusion.com/ftpservice/api/EJ2Service');
        console.log('dotnet.exe is killed');
    }

    // upload the application using remote path and it is not real path
    return gulp.src(config.deploy, { base: config.base, buffer: false })
        .pipe(conn.newer(config.remotePath))
        .pipe(conn.dest(config.remotePath));
});

gulp.task('ftp-deploy', ['deploy'], function(done) {
    var client = require('ftp');
    var ftp1 = new client();
    ftp1.connect({
        host: process.env.FTP_HOST,
        user: process.env.FTP_USER,
        password: process.env.FTP_PASSWORD
    });
    
    ftp1.on('ready', function() {
        // create a temp location path
        var tempLocation = config.realPath + Math.floor((Math.random() * 1000) + 1);
        // rename the real path to temp location path
        ftp1.rename(config.realPath, tempLocation, function(err) {
            throwError(err, ftp1, done);
            console.log('Real application has been renamed to temporary name');
            // rename the uploaded remote path to real application path
            ftp1.rename(config.remotePath, config.realPath, function(err) {
                throwError(err, ftp1, done);
                console.log('Uploaded application has been renamed to real application name');
                // remove the temp location path
                 ftp1.end();
                 done();
                // ftp1.rmdir(tempLocation, true, function(err) {
                //    throwError(err, ftp1, done);
                //    console.log('Older temp applicaation has been removed');
                //    ftp1.end();
                //    done();
                // });
            });
        });
    });
});

function throwError(err, ftp1, cb) {
    if (err) {
        cb(err);
        ftp1.end();
        process.exit(1);
    }
}
'use strict';

var aps = require("azure-publish-settings");
var zipFolder = require('zip-folder');
var kuduApi = require("kudu-api");
var gulp = require('gulp');
var glob = require('glob');
var shelljs = require('shelljs');
var simpleGit = require('simple-git');
var email = require('./mail');
var fs = require('fs');
var isReleaseBranch = /^(release\/)/g.test(process.env.BRANCH_NAME);
var isHotfixBranch = /^(hotfix\/)/g.test(process.env.BRANCH_NAME);

/** 
 * ci-build-publish gulp tasks
 */
gulp.task('ci-publish', function () {
    var branchName = process.env.BRANCH_NAME;
    var repoName = branchName === 'master' ? 'ej2-production' : 'ej2-development';
    repoName = isReleaseBranch ? 'ej2-release' : repoName;
    repoName = isHotfixBranch ? 'ej2-hotfix-new' : repoName;
    var registry = '//nexus.syncfusion.com/repository/' + repoName + '/'
    var content = `registry=https://registry.npmjs.org/
@syncfusion:registry=https:${registry}
${registry}:username=${process.env.PRIVATE_NPM_USER}
${registry}:_password=${process.env.PRIVATE_NPM_PASSWORD}
${registry}:email=${process.env.PRIVATE_NPM_EMAIL}
${registry}:always-auth=true
`;
    fs.writeFileSync('./.npmrc', content);
    shelljs.exec('npm publish');
});


gulp.task('dotnet-publish', function () {
    var restore = shelljs.exec('dotnet restore', { silent: false });
    var publish = shelljs.exec('dotnet publish -c Release -o deploy --no-restore', { silent: false });
    if (restore.code !== 0 || publish.code !== 0) {
        process.exit(1);
    }
});

/** 
 * Generic function to deploy the published folder to Azure.
 */
async function deployFolder(publishSettings, sampleList, path, done) {
    if (typeof sampleList === 'string') {
        sampleList = sampleList.split();
    }
    var platform = sampleList.pop();
    if (platform.indexOf('.zip') > -1) {
        platform = platform.replace('.zip', '');
        fileUploadToAzure(publishSettings, sampleList, path, platform, done);
    } else {
        await removeLicValidation(platform);
        zipFolder('./' + platform, './' + platform + '.zip', (err) => {
            if (err) exitProcess(`${platform} folder is failed to zip.\nError: ${err}`, platform);
            else { fileUploadToAzure(publishSettings, sampleList, path, platform, done); }
        });
    }
}
exports.deployFolder = deployFolder;

/** 
 * Generic function to deploy the Blazor test results to Azure.
 */
 async function blazorTestResultsDeploy(path) {
    var publishSettingsPath = __dirname + '/../ej2npmci.PublishSettings';
    zipFolder(path, path + '.zip', function (err) {
        if (err) {
            console.log('Error :', err);
        } else {
            console.log('Zipped folder');
            aps.read(publishSettingsPath, function (err, settings) {
                // Use the "kudu" property to pass credentials directly to kudu-api
                var api = kuduApi(settings.kudu);
                api.zip.upload(path + '.zip', 'site/test-results/blazor/development', function (err) {
                    if (err) {
                        console.log(err);
                    }
                    else{
                        console.log("Report Published Successfully...");
                    }
                });
            });
        }
    });
}
exports.blazorTestResultsDeploy = blazorTestResultsDeploy;

/** 
 * Function to prevent the license validaton for ASP Core and MVC SB.
 */
function removeLicValidation(platform) {
    if (fs.existsSync('./EJ2MVCSampleBrowser.csproj')) {
        var path = `./${platform}/Scripts/ej2.min.js`;
        fs.writeFileSync(path, fs.readFileSync(path, 'utf-8') + 'window.syncfusion={isLicValidated:true};', 'utf-8');
    }
}

// Function to upload the publish folder to Azure.
function fileUploadToAzure(publishSettings, sampleList, path, platform, done) {
    aps.read(publishSettings, (err, settings) => {
        // Use the "kudu" property to pass credentials directly to kudu-api
        var api = kuduApi(settings.kudu);
        // Use kudu-api to create folder in Azure
        api.vfs.createDirectory(path + '/' + platform, function (err) {
            if (err) exitProcess(err, platform);
        });

        // Use kudu-api to upload App_Offline.htm file to perform app offline deploy
        api.vfs.deleteFile(path + '/' + platform + '/web.config', async (err, response) => {
            if (response) console.log(`web config file deletion failed for ${platform}: ${response}`);
            api.vfs.uploadFile('./App_Offline.htm', path + '/' + platform + '/App_Offline.htm', async (err) => {
                await new Promise((resolve) => { setTimeout(resolve, 20000) });
                if (err) exitProcess(`App Offline file upload failed for ${platform}: ${err.Message}`, platform);
                else {
                    // Use kudu-api to upload files in Azure
                    api.zip.upload('./' + platform + '.zip', path + '/' + platform, (err, uploadResponse) => {
                        // Use kudu-api to delete App_Offline.htm file after deploy
                        api.vfs.deleteFile(path + '/' + platform + '/App_Offline.htm', async (err, response) => {
                            await new Promise((resolve) => { setTimeout(resolve, 5000) });
                            if (/Blazor/.test(platform)) {
                                api.vfs.uploadFile(`./${platform}/web.config`, `${path}/${platform}/web.config`, (err) => {
                                    if (err) console.log(`web config file upload failed for ${platform}: ${err}`);
                                });
                            }
                            if (response) exitProcess(`App Offline file deletion failed for ${platform}: ${response}`, platform);
                            else if (uploadResponse) {
                                api.vfs.uploadFile(`./${platform}/web.config`, `${path}/${platform}/web.config`, (err) => {
                                    if (err) console.log(`web config file upload failed for ${platform}: ${err}`);
                                    exitProcess(`${platform} zip file failed to upload: ${uploadResponse}`, platform);
                                });
                            }
                            else {
                                console.log(`\n${platform} zip file is uploaded to Kudu.`);
                                console.log(`${platform} is deployed successfully!!!`);
                                await email.mailContent(platform, 'Success', true);
                                return sampleList.length ? deployFolder(publishSettings, sampleList, path, done) : done ? done() : sampleList.length;
                            }
                        });
                    });
                }
            });
        });
    });
}

// Call exitProcess function to kill the process.
async function exitProcess(error, platform) {
    await email.mailContent(platform, 'Failure');
    console.log(error);
    process.exit(1);
}

// Gulp task to update the NuGet config based on target branch for Blazor, Core and MVC SB.
gulp.task('update-nuget-config', async () => {
    if (isReleaseBranch || isHotfixBranch || process.env.BRANCH_NAME === 'development') {
        if (fs.existsSync('./Blazor-Server-Demos/BlazorServerDemos_NET6.csproj') || fs.existsSync('./EJ2CoreSampleBrowser_NET6.csproj') || fs.existsSync('./EJ2MVCSampleBrowser.csproj')) {
            var gitAdd = [];
            var configPath = glob.sync('**/NuGet.config', { ignore: ['**/{bin,obj}/**', 'node_modules/**'] });
            var nexusFeed = getNugetFeed();
            for (var config of configPath) {
                var nuget = fs.readFileSync(config, 'utf8');
                nuget = nuget.replace(/key="blazor-nuget" value=".*\/"/, `key="blazor-nuget" value="https://nexus.syncfusion.com/repository/${nexusFeed.blazor}"`);
                nuget = nuget.replace(/key="ej2nuget" value=".*\/"/, `key="ej2nuget" value="https://nexus.syncfusion.com/repository/${nexusFeed.aspnet}"`);
                nuget = nuget.replace(/key="NexusServer" value=".*\/"/, `key="NexusServer" value="https://nexus.syncfusion.com/repository/${nexusFeed.fileIO}"`);
                fs.writeFileSync(config, nuget, 'utf-8');
                var diff = shelljs.exec(`git diff "${config}"`, { silent: true, async: false });
                if (diff.code !== 0) {
                    process.exit(1);
                } else if (diff.stdout.indexOf('diff --git') > -1) {
                    gitAdd.push(config);
                }
            }
            if (gitAdd.length) {
                var checkoutBranch = 'nugetconfig';
                var targetRepo = `https://SyncfusionBuild:${process.env.GithubBuildAutomation_PrivateToken}@github.com/essential-studio/${process.env.JOB_NAME.split('/')[1]}.git`;
                var checkout = shelljs.exec(`git clone ${targetRepo} -b ${process.env.BRANCH_NAME} ${checkoutBranch}`, { silent: true });
                if (checkout.code !== 0) {
                    process.exit(1);
                }
                for (var copyFiles of gitAdd) {
                    shelljs.cp('-f', copyFiles, checkoutBranch + '/' + copyFiles);
                }
                shelljs.cd(checkoutBranch);
                await simpleGit('').init().add(gitAdd).commit('Updated nexus feeds in NuGet.config').push(targetRepo, process.env.BRANCH_NAME, () => {
                    console.log('NuGet.config file committed.');
                    shelljs.cd('../');
                    shelljs.rm('-rf', checkoutBranch);
                });
            }
        }
    }
});

function getNugetFeed() {
    var targetBranch = {};
    targetBranch['blazor'] = 'blazor-development/';
    targetBranch['blazor'] = /^((hotfix\/))/g.test(process.env.BRANCH_NAME) ? 'blazor-hotfix/' : targetBranch['blazor'];
    targetBranch['blazor'] = /^((release\/))/g.test(process.env.BRANCH_NAME) ? 'blazor-release/' : targetBranch['blazor'];

    targetBranch['aspnet'] = 'ej2-nuget/';
    targetBranch['aspnet'] = /^((hotfix\/))/g.test(process.env.BRANCH_NAME) ? 'ej2-nuget-hotfix/' : targetBranch['aspnet'];
    targetBranch['aspnet'] = /^((release\/))/g.test(process.env.BRANCH_NAME) ? 'ej2-nuget-release/' : targetBranch['aspnet'];

    targetBranch['fileIO'] = 'nuget-hosted/';
    targetBranch['fileIO'] = /^((hotfix\/))/g.test(process.env.BRANCH_NAME) ? 'nuget-servicepack/' : targetBranch['fileIO'];
    targetBranch['fileIO'] = /^((release\/))/g.test(process.env.BRANCH_NAME) ? 'nuget-hosted/' : targetBranch['fileIO'];
    return targetBranch;
}
